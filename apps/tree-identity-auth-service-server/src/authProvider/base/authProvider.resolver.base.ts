/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AuthProvider } from "./AuthProvider";
import { AuthProviderCountArgs } from "./AuthProviderCountArgs";
import { AuthProviderFindManyArgs } from "./AuthProviderFindManyArgs";
import { AuthProviderFindUniqueArgs } from "./AuthProviderFindUniqueArgs";
import { CreateAuthProviderArgs } from "./CreateAuthProviderArgs";
import { UpdateAuthProviderArgs } from "./UpdateAuthProviderArgs";
import { DeleteAuthProviderArgs } from "./DeleteAuthProviderArgs";
import { AuthProviderService } from "../authProvider.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AuthProvider)
export class AuthProviderResolverBase {
  constructor(
    protected readonly service: AuthProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AuthProvider",
    action: "read",
    possession: "any",
  })
  async _authProvidersMeta(
    @graphql.Args() args: AuthProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AuthProvider])
  @nestAccessControl.UseRoles({
    resource: "AuthProvider",
    action: "read",
    possession: "any",
  })
  async authProviders(
    @graphql.Args() args: AuthProviderFindManyArgs
  ): Promise<AuthProvider[]> {
    return this.service.authProviders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AuthProvider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AuthProvider",
    action: "read",
    possession: "own",
  })
  async authProvider(
    @graphql.Args() args: AuthProviderFindUniqueArgs
  ): Promise<AuthProvider | null> {
    const result = await this.service.authProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AuthProvider)
  @nestAccessControl.UseRoles({
    resource: "AuthProvider",
    action: "create",
    possession: "any",
  })
  async createAuthProvider(
    @graphql.Args() args: CreateAuthProviderArgs
  ): Promise<AuthProvider> {
    return await this.service.createAuthProvider({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AuthProvider)
  @nestAccessControl.UseRoles({
    resource: "AuthProvider",
    action: "update",
    possession: "any",
  })
  async updateAuthProvider(
    @graphql.Args() args: UpdateAuthProviderArgs
  ): Promise<AuthProvider | null> {
    try {
      return await this.service.updateAuthProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuthProvider)
  @nestAccessControl.UseRoles({
    resource: "AuthProvider",
    action: "delete",
    possession: "any",
  })
  async deleteAuthProvider(
    @graphql.Args() args: DeleteAuthProviderArgs
  ): Promise<AuthProvider | null> {
    try {
      return await this.service.deleteAuthProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
